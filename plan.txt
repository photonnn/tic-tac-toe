1)
An array, 1D should be enough, to check for three I can check first, 
horizontally that is 1-3, 3-6, 6-9 and then for each square + 3 - that is 
1 == 1 + 3 == 1 + 3 + 3, checks if 1,4,7 are equal (vertical 3). Though now that
I think about it 2D can work easy as well, I'll see.

A gameboard array will be stored within gameboard object. Will likely also
include checkForThree(), render(), getArray(), checkIfTaken() and 
generateAiMove() is what I am thinking right now.

Since there are two players I will create a factory function. Each player will 
have score. 

Everythink will be wrapped up in a module or a factory.

For now I'll leave it here.

2)
To start I'll experiment with DOM and IFFE. I succeeded in modifying DOM. Also
did another test with a button, I added an event listener and it worked fine, 
I suppose I will have no need to create a module.

I'll start with basic boilerplate inside the IFFE - array, gameboard object and 
player. Since there are only 2 players and one of them is AI I won't bother 
with constructors or factory functions. 
Made a basic boilerplate, I'll do html & css for now.

The gameboard itself itself will be a grid container centered with flexbox. The
container will have 3 rows and 3 columns. The container itself will have 9 divs,
and then I'll use nth child to make borders to differentiate different spots 
that you can place X or O.

3)
Now that I've made it change textContent when you click the div and add class 
taken I will make it so that it changes between X and Os. Had a few issues here,
but managed to resolve them, was a stupid bug, forgot the - 1 for index.

Now for checkForThree() function, I'll first do a check for vertical check.

Kind of speedrun the next section. I basically finished the basic version of 
the game. The next step is to create a hidden element that shows at the 
beginning or after a user chooses to play again. A window is opened and the 
background is faded. The user is goven an option to choose either X or O. Based
on that choice game runs differently. 
It is also a good choice to modify the 
play function, perhaps even create an object to control the flow of the game,
I'll see. 
After that is done the last step is to create a strong AI, maybe even
option to choose between the two, easy and hard. As for how the strong AI will 
work, there are some algorithms such as minmax(), but I feel I can manage to 
create an impossible to beat AI by creating a few core steps for AI to follow. 
That means priority is to always first checkForThree and prevent that, than
it is to place in the center, if center is taken take an even box or odd based 
on circumstanced, something like that. I can then play again google tic-tic-toe 
for a basic test if my AI is unbeatable.

